{"version":3,"sources":["components/organisms/palleteModal/palleteModal.module.css","components/molecules/chordPallete/chordPallete.module.css","components/atoms/chordNotes/chordNotes.module.css","components/atoms/chordPalleteOption/chordPalleteOption.module.css","components/atoms/cardTitle/cardTitle.jsx","components/atoms/chordNotes/chordNotes.jsx","components/atoms/playerButton.jsx","components/atoms/chordPlayer/chordPlayer.jsx","components/atoms/card.jsx","components/atoms/openModalButton.jsx","components/atoms/chordPalleteOption/chordPalleteOption.jsx","components/molecules/chordPallete/chordPallete.jsx","components/organisms/palleteModal/palleteModal.jsx","lib/converter.js","components/molecules/cards/chordCard/chordCard.jsx","components/atoms/playBothButton.jsx","components/atoms/chordScalePlayer/chordScalePlayer.jsx","components/atoms/footer.jsx","components/atoms/header.jsx","components/atoms/scaleNotes/scaleNotes.jsx","components/atoms/scalePlayer/scalePlayer.jsx","components/atoms/scaleSelector.jsx","components/molecules/cards/scaleCard/scaleCard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardTitle","props","children","ChordNotes","useEffect","document","getElementById","innerHTML","vf","Vex","Flow","Factory","renderer","elementId","width","height","score","EasyScore","System","addStave","voices","voice","notes","join","addClef","draw","className","styles","chordNotesWrapper","id","PlayerButton","onClick","icon","faPlay","playChord","polySynth","Tone","cancel","triggerAttackRelease","ChordPlayer","connect","toMaster","Card","OpenModalButton","color","faEdit","ChordPalleteOption","selectOption","box","ChordPallete","chordPallete","title","options","choices","map","choice","key","Modal","setAppElement","modalStyles","content","top","left","right","bottom","marginRight","transform","PalleteModal","style","isOpen","modalIsOpen","onRequestClose","closeModal","palleteContainer","rootsPallete","pallete","roots","typesPallete","types","modalFooter","chordToNotes","chord","Chord","Object","values","octave","Tonal","note","chroma","index","toString","ChordCard","useState","setModalIsOpen","palleteType","editChord","PlayBothButton","ChordScalePlayer","state","synth","oscillator","type","chordNotes","this","time","start","loop","getNewSequence","stop","position","playChordScale","bind","Component","Footer","Header","Accidental","Formatter","Stave","StaveNote","Renderer","ACCIDENTAL_REGEX","OCTAVE_REGREX","ScaleNotes","wrapperRef","React","createRef","setState","current","Backends","SVG","renderScale","slice","accidental","match","staveNote","clef","keys","toLowerCase","duration","addAccidental","secondHalf","length","secondNotes","substring","numRests","i","push","resize","context","getContext","clear","setViewBox","firstStave","setContext","firstNotes","firstStaveNotes","FormatAndDraw","secondStave","secondStaveNotes","scaleNotesWrapper","ref","dangerouslySetInnerHTML","__html","ScalePlayer","sequence","playScale","ScaleSelector","value","currentScale","onChange","e","onScaleChange","target","chordScales","scale","ScaleCard","root","currentScaleNotes","App","updateScale","_","prevState","Scale","getChordScales","getScaleNotes","selectedScale","handleEditChord","handleScaleChange","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9eb96799.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"palleteContainer\":\"palleteModal_palleteContainer__3OGp-\",\"rootsPallete\":\"palleteModal_rootsPallete__3_dXj\",\"typesPallete\":\"palleteModal_typesPallete__WmV_B\",\"modalFooter\":\"palleteModal_modalFooter__1gFTx\",\"openModalBtnWrapper\":\"palleteModal_openModalBtnWrapper__2YSvv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chordPallete\":\"chordPallete_chordPallete__3airV\",\"title\":\"chordPallete_title__3Ydpp\",\"options\":\"chordPallete_options__1cq5m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chordNotes\":\"chordNotes_chordNotes__wRTbN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"chordPalleteOption_box__2YWJ6\"};","import React from \"react\";\n\nconst CardTitle = props => {\n  return (\n    <span className=\"letter\">\n      {props.children}\n      <style jsx>{`\n        .letter {\n          font-size: 1.7rem;\n          color: #837f7f;\n          user-select: none;\n        }\n      `}</style>\n    </span>\n  );\n};\n\nexport default CardTitle;\n","import React, { useEffect } from \"react\";\nimport Vex from \"vexflow\";\nimport styles from \"./chordNotes.module.css\";\n\nconst ChordNotes = props => {\n  useEffect(() => {\n    document.getElementById(\"chordNotes\").innerHTML = \"\";\n    var vf = new Vex.Flow.Factory({\n      renderer: { elementId: \"chordNotes\", width: 220, height: 150 }\n    });\n    var score = vf.EasyScore();\n    var system = vf.System();\n    system\n      .addStave({\n        voices: [score.voice(score.notes(`(${props.notes.join(\" \")})/w`))]\n      })\n      .addClef(\"treble\");\n\n    vf.draw();\n  });\n  return <div className={styles.chordNotesWrapper} id=\"chordNotes\"></div>;\n};\n\nexport default ChordNotes;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\n\nconst PlayerButton = props => {\n  return (\n    <div onClick={() => props.onClick()} className=\"btn\">\n      <FontAwesomeIcon icon={faPlay} />\n      <span>{props.children}</span>\n      <style jsx>\n        {`\n          div {\n            display: flex;\n            align-items: center;\n            border-radius: 4px;\n            border: none;\n            height: 30%;\n            min-width: 15%;\n            padding: 0 2%;\n            color: #fff;\n            background: #21a1c7;\n            cursor: pointer;\n            font-size: 1rem;\n          }\n          div span {\n            margin-left: 10%;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default PlayerButton;\n","import React from \"react\";\nimport * as Tone from \"tone\";\nimport PlayerButton from \"../playerButton\";\n\nconst ChordPlayer = props => {\n  let polySynth = new Tone.PolySynth(4, Tone.Synth).connect(\n    new Tone.Gain(0.1).toMaster()\n  );\n  return (\n    <PlayerButton\n      onClick={() => {\n        playChord(polySynth, props.notes);\n      }}\n    >\n      Play chord\n    </PlayerButton>\n  );\n};\n\nconst playChord = (polySynth, notes) => {\n  Tone.Transport.cancel();\n  polySynth.triggerAttackRelease(notes, \"1m\");\n};\n\nexport default ChordPlayer;\n","import React from \"react\";\n\nconst Card = props => {\n  return (\n    <div className=\"card\">\n      {props.children}\n      <style jsx>{`\n        .card {\n          border-radius: 5%;\n          box-shadow: 0px 2px 3px -2px rgba(0, 0, 0, 0.5);\n          min-width: 50%;\n          height: 50%;\n          background-color: #fff;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\n\nconst OpenModalButton = props => {\n  return (\n    <div>\n      <FontAwesomeIcon\n        color=\"#21a1c7\"\n        icon={faEdit}\n        onClick={() => props.onClick()}\n      />\n      <style jsx>\n        {`\n          div {\n            cursor: pointer;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default OpenModalButton;\n","import React from \"react\";\nimport styles from \"./chordPalleteOption.module.css\";\n\nconst ChordPalleteOption = props => {\n  return (\n    <div\n      onClick={() => {\n        props.selectOption(props.children);\n      }}\n      className={styles.box}\n    >\n      <span>{props.children}</span>\n    </div>\n  );\n};\n\nexport default ChordPalleteOption;\n","import React from \"react\";\nimport ChordPalleteOption from \"../../atoms/chordPalleteOption/chordPalleteOption\";\nimport styles from \"./chordPallete.module.css\";\n\nconst ChordPallete = props => {\n  return (\n    <div className={styles.chordPallete}>\n      <span className={styles.title}>{props.title}</span>\n      <div className={styles.options}>\n        {props.choices.map(choice => {\n          return (\n            <ChordPalleteOption\n              key={choice}\n              selectOption={() => {\n                props.selectOption(choice);\n              }}\n            >\n              {choice}\n            </ChordPalleteOption>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ChordPallete;\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport ChordPallete from \"../../molecules/chordPallete/chordPallete\";\nimport styles from \"./palleteModal.module.css\";\n\nModal.setAppElement(\"#root\");\n\nconst modalStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    width: \"70%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\n\nconst PalleteModal = props => {\n  return (\n    <div>\n      <Modal\n        style={modalStyles}\n        isOpen={props.modalIsOpen}\n        onRequestClose={props.closeModal}\n      >\n        <div className={styles.palleteContainer}>\n          <div className={styles.rootsPallete}>\n            <ChordPallete\n              selectOption={choice => props.selectOption(choice, \"root\")}\n              {...props.pallete.roots}\n            ></ChordPallete>\n          </div>\n          <div className={styles.typesPallete}>\n            <ChordPallete\n              selectOption={choice => props.selectOption(choice, \"type\")}\n              {...props.pallete.types}\n            ></ChordPallete>\n          </div>\n        </div>\n        <div className={styles.modalFooter}>\n          <button onClick={props.closeModal}>Close</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default PalleteModal;\n","\nimport { Tonal } from \"@tonaljs/modules\";\nimport { Chord } from \"@tonaljs/modules\";\n\nexport const chordToNotes = chord => {\n  /**\n   * Convert chord name to array of notes with octave number\n   * @param {string} chord - chord symbol\n   * @return {array} notes - notes with octave number\n   */\n  let notes = Chord.chord(Object.values(chord)).notes;\n  let octave = Tonal.note(notes[0]).chroma < 7 ? 4 : 3;\n  notes = notes.map((note, index) => {\n    // set chord notes to root position\n    if (\n      index > 0 &&\n      Tonal.note(note).chroma < Tonal.note(notes[index - 1]).chroma\n    ) {\n      octave += 1;\n    }\n    return note + octave.toString();\n  });\n  return notes;\n};\n","import React, { useState } from \"react\";\nimport CardTitle from \"../../../atoms/cardTitle/cardTitle\";\nimport ChordNotes from \"../../../atoms/chordNotes/chordNotes\";\nimport ChordPlayer from \"../../../atoms/chordPlayer/chordPlayer\";\nimport Card from \"../../../atoms/card\";\nimport OpenModalButton from \"../../../atoms/openModalButton\";\nimport PalleteModal from \"../../../organisms/palleteModal/palleteModal\";\nimport { chordToNotes } from \"../../../../lib/converter\";\n\nconst ChordCard = props => {\n  let notes = chordToNotes(props.chord);\n  let [modalIsOpen, setModalIsOpen] = useState(false);\n  return (\n    <Card>\n      <div className=\"letterButtonWrapper\">\n        <div className=\"letterWrapper\">\n          <CardTitle>{Object.values(props.chord).join(\"\")}</CardTitle>\n        </div>\n        <OpenModalButton\n          onClick={() => {\n            setModalIsOpen(true);\n          }}\n        >\n          Change chord\n        </OpenModalButton>\n      </div>\n      <div className=\"playerNotesWrapper\">\n        <ChordPlayer notes={notes}></ChordPlayer>\n        <div className=\"notesWrapper\">\n          <ChordNotes notes={notes}></ChordNotes>\n        </div>\n      </div>\n      <PalleteModal\n        modalIsOpen={modalIsOpen}\n        closeModal={() => {\n          setModalIsOpen(false);\n        }}\n        selectOption={(choice, palleteType) => {\n          props.editChord(choice, palleteType);\n        }}\n        pallete={props.pallete}\n      ></PalleteModal>\n      <style jsx>{`\n        .card {\n          border-radius: 5%;\n          box-shadow: 0px 2px 3px -2px rgba(0, 0, 0, 0.5);\n          width: 40%;\n          height: 35%;\n          background-color: #fff;\n        }\n        .letterButtonWrapper {\n          display:flex;\n          align-items: center;\n          height: 30%;\n          padding: 3% 3%;\n        }\n        .letterWrapper {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          height: 20%;\n          width: 20%;\n          margin-right: 5%;\n        }\n        .playerNotesWrapper {\n          display: flex;\n          align-items: center;\n          height: 50%;\n          padding 0 5%;\n        }\n        .notesWrapper {\n          margin-left: 5%;\n        }\n      `}</style>\n    </Card>\n  );\n};\n\nexport default ChordCard;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\n\nconst PlayBothButton = props => {\n  return (\n    <div onClick={() => props.onClick()} className=\"btn\">\n      <FontAwesomeIcon icon={faPlay} />\n      <span>{props.children}</span>\n      <style jsx>\n        {`\n          div {\n            display: flex;\n            align-items: center;\n            border-radius: 4px;\n            border: none;\n            height: 60%;\n            min-width: 15%;\n            padding: 0 10%;\n            color: #fff;\n            background: #2ec721;\n            cursor: pointer;\n            font-size: 1rem;\n          }\n          div span {\n            margin-left: 10%;>\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default PlayBothButton;\n","import React, { Component } from \"react\";\nimport { chordToNotes } from \"../../../lib/converter\";\nimport PlayBothButton from \"../../atoms/playBothButton\";\nimport * as Tone from \"tone\";\n\nclass ChordScalePlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      synth: new Tone.Synth({\n        oscillator: {\n          type: \"square\"\n        }\n      }).connect(new Tone.Gain(0.1).toMaster()),\n      polySynth: new Tone.PolySynth(4, Tone.Synth).connect(\n        new Tone.Gain(0.1).toMaster()\n      )\n    };\n  }\n\n  getNewSequence() {\n    Tone.Transport.cancel();\n    let chordNotes = chordToNotes(this.props.chord);\n    let chordSequence = new Tone.Part(\n      (time, chord) => {\n        this.state.polySynth.triggerAttackRelease(chord, \"2m\", time);\n      },\n      [[0, chordNotes]]\n    ).start(0);\n    chordSequence.loop = false;\n\n    let scaleSequence = new Tone.Sequence(\n      (time, note) => {\n        this.state.synth.triggerAttackRelease(note, \"4n\", time);\n      },\n      this.props.notes,\n      \"4n\"\n    ).start(0);\n    scaleSequence.loop = false;\n  }\n\n  playChordScale() {\n    this.getNewSequence();\n    Tone.Transport.stop();\n    Tone.Transport.position = 0;\n    Tone.Transport.start();\n  }\n\n  render() {\n    return (\n      <PlayBothButton onClick={this.playChordScale.bind(this)}>\n        Play Both\n      </PlayBothButton>\n    );\n  }\n}\n\nexport default ChordScalePlayer;\n","import React from \"react\";\n\nconst Footer = props => {\n  return (\n    <footer>\n      <style jsx>\n        {`\n          footer {\n            background-color: #21a1c7;\n            width: 100%;\n            height: 5%;\n            position: absolute;\n            bottom: 0;\n          }\n        `}\n      </style>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nconst Header = props => {\n  return (\n    <header>\n      <h1>{props.children}</h1>\n      <style jsx>{`\n        header {\n          background-color: #21a1c7;\n          position: absolute;\n          width: 100%;\n        }\n        header h1 {\n          margin-left: 3%;\n          user-select: none;\n          color: #fff;\n          font-weight: lighter;\n        }\n      `}</style>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Vex from \"vexflow\";\nimport styles from \"./scaleNotes.module.css\";\n\nconst { Accidental, Formatter, Stave, StaveNote, Renderer } = Vex.Flow;\n\nconst ACCIDENTAL_REGEX = /[#b]+/;\nconst OCTAVE_REGREX = /\\d/;\n\nclass ScaleNotes extends Component {\n  constructor(props) {\n    super(props);\n    this.wrapperRef = React.createRef();\n    this.state = {\n      renderer: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      renderer: new Renderer(this.wrapperRef.current, Renderer.Backends.SVG)\n    });\n  }\n\n  componentDidUpdate() {\n    this.renderScale();\n  }\n\n  firstStaveNotes() {\n    return this.props.notes.slice(0, 4).map(note => {\n      let accidental = note.match(ACCIDENTAL_REGEX);\n      let octave = note.match(OCTAVE_REGREX)[0];\n      let staveNote = new StaveNote({\n        clef: \"treble\",\n        keys: [note.slice(0, 1).toLowerCase() + \"/\" + octave],\n        duration: \"q\"\n      });\n      if (accidental) {\n        staveNote.addAccidental(0, new Accidental(accidental[0]));\n      }\n      return staveNote;\n    });\n  }\n\n  secondStaveNotes() {\n    let secondHalf = this.props.notes.slice(4, this.props.notes.length);\n    let secondNotes = secondHalf.map(note => {\n      let accidental = note.match(ACCIDENTAL_REGEX);\n      let octave = note.match(OCTAVE_REGREX)[0];\n      let staveNote = new StaveNote({\n        clef: \"treble\",\n        keys: [note.substring(0, 1).toLowerCase() + \"/\" + octave],\n        duration: \"q\"\n      });\n      if (accidental) {\n        staveNote.addAccidental(0, new Accidental(accidental[0]));\n      }\n      return staveNote;\n    });\n    // add extra rests\n    let numRests = 4 - secondHalf.length;\n    for (let i = 0; i < numRests; i++) {\n      secondNotes.push(\n        new StaveNote({ clef: \"treble\", keys: [\"b/4\"], duration: \"qr\" })\n      );\n    }\n    return secondNotes;\n  }\n\n  renderScale() {\n    this.state.renderer.resize(750, 100);\n    let context = this.state.renderer.getContext();\n    context.clear();\n    context.setViewBox(0, 0, 1200, 100);\n\n    let firstStave = new Stave(20, 0, 300);\n    firstStave.addClef(\"treble\");\n    firstStave.setContext(context).draw();\n    let firstNotes = this.firstStaveNotes();\n    Formatter.FormatAndDraw(context, firstStave, firstNotes);\n\n    let secondStave = new Stave(320, 0, 300);\n    secondStave.setContext(context).draw();\n\n    let secondNotes = this.secondStaveNotes();\n    Formatter.FormatAndDraw(context, secondStave, secondNotes);\n  }\n\n  render() {\n    return (\n      <div\n        className={styles.scaleNotesWrapper}\n        id=\"scaleNotes\"\n        ref={this.wrapperRef}\n        dangerouslySetInnerHTML={{ __html: \"\" }}\n      ></div>\n    );\n  }\n}\n\nexport default ScaleNotes;\n","import React, { Component } from \"react\";\nimport * as Tone from \"tone\";\nimport PlayerButton from \"../../atoms/playerButton\";\n\nclass ScalePlayer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      synth: new Tone.Synth({\n        oscillator: {\n          type: \"square\"\n        }\n      }).connect(new Tone.Gain(0.1).toMaster()),\n      sequence: this.getNewSequence()\n    };\n  }\n\n  getNewSequence() {\n    Tone.Transport.cancel();\n    let sequence = new Tone.Sequence(\n      (time, note) => {\n        this.state.synth.triggerAttackRelease(note, \"4n\", time);\n      },\n      this.props.notes,\n      \"4n\"\n    ).start(0);\n    sequence.loop = false;\n    return sequence;\n  }\n\n  playScale() {\n    this.getNewSequence();\n    Tone.Transport.stop();\n    Tone.Transport.position = 0;\n    Tone.Transport.start();\n  }\n\n  render() {\n    return (\n      <PlayerButton onClick={this.playScale.bind(this)} id=\"playChord\">\n        Play scale\n      </PlayerButton>\n    );\n  }\n}\n\nexport default ScalePlayer;\n","import React from \"react\";\n\nconst ScaleSelector = props => {\n  return (\n    <div className=\"wrapper\">\n      <select\n        value={props.currentScale}\n        onChange={e => props.onScaleChange(e.target.value)}\n      >\n        {props.chordScales.map(scale => {\n          return (\n            <option value={scale} key={scale}>\n              {scale}\n            </option>\n          );\n        })}\n      </select>\n      <style jsx>\n        {`\n          .wrapper select {\n            cursor: pointer;\n            outline: none;\n            background: transparent;\n            box-shadow: none;\n            color: #333;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default ScaleSelector;\n","import React from \"react\";\nimport ScaleNotes from \"../../../atoms/scaleNotes/scaleNotes\";\nimport ScalePlayer from \"../../../atoms/scalePlayer/scalePlayer\";\nimport ScaleSelector from \"../../../atoms/scaleSelector\";\nimport Card from \"../../../atoms/card\";\nimport CardTitle from \"../../../atoms/cardTitle/cardTitle\";\n\nconst ScaleCard = props => {\n  return (\n    <Card>\n      <div className=\"letterButtonWrapper\">\n        <div className=\"letterWrapper\">\n          <CardTitle>{props.chord.root + \" \" + props.currentScale}</CardTitle>\n        </div>\n        <ScaleSelector\n          currentScale={props.currentScale}\n          chordScales={props.chordScales}\n          onScaleChange={scale => {\n            props.onScaleChange(scale);\n          }}\n        />\n      </div>\n      <div className=\"playerNotesWrapper\">\n        <ScalePlayer notes={props.currentScaleNotes}></ScalePlayer>\n        <div className=\"notesWrapper\">\n          <ScaleNotes notes={props.currentScaleNotes}></ScaleNotes>\n        </div>\n      </div>\n      <style jsx>\n        {`\n            .letterButtonWrapper {\n              display: flex;\n              align-items: center;\n              height: 30%;\n              padding: 3% 3%;\n            }\n            .letterWrapper {\n              display: flex;\n              align-items: center;\n              height: 20%;\n              min-width: 60%;\n              margin-right: 5%;\n            }\n            .playerNotesWrapper {\n              display: flex;\n              align-items: center;\n              height: 50%;\n              padding 0 5%;\n            }\n            .notesWrapper {\n              margin-left: 5%;\n            }\n          `}\n      </style>\n    </Card>\n  );\n};\n\nexport default ScaleCard;\n","import React, { Component } from \"react\";\nimport { Chord, Scale } from \"@tonaljs/modules\";\nimport ChordCard from './components/molecules/cards/chordCard/chordCard'\nimport ChordScalePlayer from \"./components/atoms/chordScalePlayer/chordScalePlayer\";\nimport Footer from \"./components/atoms/footer\";\nimport Header from './components/atoms/header';\nimport ScaleCard from './components/molecules/cards/scaleCard/scaleCard'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chord: {\n        root: 'C',\n        type: 'M7',\n      },\n      pallete: {\n        roots: {\n          title: 'Roots',\n          choices: ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B']\n        },\n        types: {\n          title: 'Chord Types',\n          choices: ['M', 'm', 'M7', 'm7', '7', 'mM7']\n        }\n      },\n      chordScales: [],\n      currentScale: '',\n      currentScaleNotes: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateScale();\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (prevState.chord !== this.state.chord) {\n      this.updateScale();\n    }\n  }\n\n  getChordScales() {\n    return Chord.chordScales(Object.values(this.state.chord).join(\"\"));\n  }\n\n  getScaleNotes(scale) {\n    return Scale.scale(this.state.chord.root + \"4 \" + scale).notes;\n  }\n\n  updateScale() {\n    let currentScale = this.getChordScales()[0];\n    this.setState({\n      chordScales: this.getChordScales(),\n      currentScale: currentScale,\n      currentScaleNotes: this.getScaleNotes(currentScale)\n    });\n  }\n\n  handleEditChord(choice, palleteType) {\n    let chord = { ...this.state.chord };\n    chord[palleteType] = choice;\n    this.setState({ chord: chord })\n  }\n\n  handleScaleChange(selectedScale) {\n    this.setState({\n      currentScale: selectedScale,\n      currentScaleNotes: Scale.scale(\n        this.state.chord.root + \"4 \" + selectedScale\n      ).notes\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Header>\n          ScaleGrasper\n        </Header>\n        <div className=\"cardsWrapper\">\n          <ChordCard chord={this.state.chord}\n            pallete={this.state.pallete}\n            editChord={(choice, palleteType) => { this.handleEditChord(choice, palleteType) }} />\n          <ScaleCard\n            chord={this.state.chord}\n            chordScales={this.state.chordScales}\n            currentScale={this.state.currentScale}\n            currentScaleNotes={this.state.currentScaleNotes}\n            onScaleChange={(selectedScale) => this.handleScaleChange(selectedScale)}\n          ></ScaleCard>\n        </div>\n        <div className=\"chordScaleWrapper\">\n          <ChordScalePlayer\n            notes={this.state.currentScaleNotes}\n            chord={this.state.chord}\n          ></ChordScalePlayer>\n        </div>\n        <Footer />\n\n        <style jsx>{`\n          .wrapper {\n            height: 100%;\n          }\n          .cardsWrapper {\n            margin: 0 auto;\n            padding: 0 5%;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            height: 70%;\n          }\n          .chordScaleWrapper {\n            width: 10%;\n            height: 10%;\n            margin: 0 auto;\n          }\n        `}\n        </style>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}